use std::net::{TcpStream, TcpListener};
use std::collections::HashMap;
use std::io::prelude::*;
use std::io::BufReader;
use std::fs::File;
use std::fs;
use std::env;

mod response;

fn main() {
    let args = env::args().collect(); // arg1 = site path
    let listener = TcpListener::bind("127.0.0.1:8080").expect("Failed to connect to localhost");
    for stream in listener.incoming() {
        let stream = stream.unwrap();
        handle_request(stream, &generate_link_map(), &args[1]);
    }
}

fn handle_request(mut stream: TcpStream, links: &HashMap<String, String>) {
    let buffer = BufReader::new(&mut stream);
    let lines: Vec<String> = buffer.lines().map(|result| result.unwrap()).take_while(|line| !line.is_empty()).collect();
    println!("{:?}", lines);
    let status = "HTTP/1.1 200 OK";
    let link: (String, String) = match response::find_file(&lines, links) {
        Some(link) => link,
        None => ("404error.html".to_string(), "./site-data/404error.html".to_string())
    };
    let split_path: Vec<_> = link.1.split("/").collect();
    let template_response: Option<response::ResponseData> = None;
    
    if split_path[0] == "template" {
        match split_path[1] {
            "article" => {
                let file: File = File::open(split_path[2]).unwrap();
                let token_set: response::TokenSet = response::TokenSet::new(&BufReader::new(file).lines().map(|line| line.unwrap()).collect());
                let template_file = response::generate_template_page(&BufReader::new(File::new(");
            }
            "project" => {}
            "synthblog" => {}
            _ => {}
        }
    }

    println!("{} {}", link.0, link.1);
    
    let response_data: response::ResponseData = response::ResponseData::new(
                                                fs::read(link.1).expect("The requested file doesn't exists!"), 
                                                &link.0);
    let formatted_response: String = format!("{status}\r\n Content-Length: {0}\r\n\r\n", response_data.length);
    let mut final_bytes: Vec<u8>= formatted_response.as_bytes().to_vec();
    final_bytes.append(&mut response_data.content.clone());
    stream.write_all(&final_bytes).unwrap();
}

fn generate_link_map() -> HashMap<String, String> {
    let mut map: HashMap<String, String> = Default::default();
    let file = File::open("linksheet.csv").expect("Couldn't find linksheet.csv!");
    let reader = BufReader::new(file);
    reader.lines().map(|result| result.unwrap()).for_each(|line| {
        let skip = || -> bool { 
            match line.chars().next() {
                Some(char) => {
                    if char == '#' {
                        return true;
                    }
                    return false;
                },
                None => false,
            }
        };
        if !skip() {
            let split: Vec<&str> = line.split(",").collect();
            map.insert(split[0].to_string(), split[1].to_string());
        }
    });
    map
}
